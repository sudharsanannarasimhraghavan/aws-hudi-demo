AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Parameters
        Parameters:
          - VPC
          - Subnet1
          - Subnet2
          - CIDRBlock
          - DBUser
          - DBPassword
          - EMRLogS3Bucket
          - KeyName
    ParameterLabels:
      VPC:
        default: 'VPC with atleast 2 Public Subnets for EMR, RDS and DMS'
      Subnet1:
        default: 'Public Subnet for EMR, RDS and DMS - Choice1'
      Subnet2:
        default: 'Public Subnet for EMR, RDS and DMS - Choice2'
      CIDRBlock:
        default: CIDR block to open access to RDS
      DBUser:
        default: Database User - Default value is master
      DBPassword:
        default: Database Password  - Default value is QAZwsx123
      EMRLogS3Bucket:
        default: S3 Bucket for EMR Logs
      KeyName:
        default: KeyPair to access EMR nodes
Description: This CloudFormation Template spins up an environment for the Hudi Demo CDC using EMR

Parameters:
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Default: '{{ vpc_info.VPC }}'
  Subnet1:
    Type: 'AWS::EC2::Subnet::Id'
    Default: '{{ vpc_info.SubnetAPublic }}'
  Subnet2:
    Type: 'AWS::EC2::Subnet::Id'
    Default: '{{ vpc_info.SubnetBPublic }}'
  CIDRBlock:
    Type: String
    Default: '{{ sg_cidr }}'
  DBUser:
    Type: String
    Default: {{ rds_master_user }}
  DBPassword:
    Type: String
    NoEcho: 'true'
    Default: {{ rds_master_password }}
  EMRLogS3Bucket:
    Type: String
    Default: '{{ emr_log_bucket }}'
  KeyName:
    Description: Must be an existing Keyname
    Type: AWS::EC2::KeyPair::KeyName
    Default: '{{ ec2_keypair }}'


Resources:


  TempS3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      BucketName: {{ bucket_data }}


  GlueDB:
    Type: 'AWS::Glue::Database'
    Properties:
      CatalogId: !Ref 'AWS::AccountId'
      DatabaseInput:
        Description: Database for the Hudi CDC Demo
        LocationUri: 's3://{{ bucket_data }}/'
        Name: {{ glue_db_name }}


  mySQLDB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: '{{ rds_allocation_storage }}'
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 1
      DBInstanceClass: {{rds_instance_class}}
      DBInstanceIdentifier: {{ rds_instance_identifier }}
      DBName: {{ rds_db_name }}
      DBParameterGroupName: !Ref mySQLDBParameterGroup
      DBSubnetGroupName: !Ref mySQLsubnetgroup
      DeleteAutomatedBackups: true
      DeletionProtection: false
      EnablePerformanceInsights: false
      Engine: {{ rds_engine }}
      EngineVersion: {{ rds_engine_version }}
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      MaxAllocatedStorage: {{ rds_max_allocation_storage }}
      MultiAZ: false
      Port: '{{ rds_port }}'
      PubliclyAccessible: true
      StorageEncrypted: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref mySQLSecurityGroup


  mySQLDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Custom Parameter Group for mySQL 5.7 Hudi Demo Source DB
      Family: mysql5.7
      Parameters:
        binlog_format: ROW
        binlog_checksum: NONE


  mySQLsubnetgroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Subnet Group for mySQL DB for Hudi Demo
      DBSubnetGroupName: {{ business_unit }}-{{ application_name }}-rdssubnetgroup
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2


  DMSsubnetgroup:
    Type: 'AWS::DMS::ReplicationSubnetGroup'
    Properties:
      ReplicationSubnetGroupDescription: Subnet Group for DMS for Hudi Demo
      ReplicationSubnetGroupIdentifier: {{ business_unit }}-hudi-dms-sg
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2


  mySQLSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: {{ business_unit }}-{{ application_name }}-sg-01
      GroupDescription: Security Group for mySQL Database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: {{ rds_port }}
          ToPort: {{ rds_port }}
          CidrIp: !Ref CIDRBlock
        - IpProtocol: tcp
          FromPort: {{ rds_port }}
          ToPort: {{ rds_port }}
          SourceSecurityGroupId: !GetAtt
            - DMSSecurityGroup
            - GroupId
      VpcId: !Ref VPC


  DMSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for the DMS instance for Hudi Demo
      VpcId: !Ref VPC


  DMSSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref DMSSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref DMSSecurityGroup


  DMSReplicationInstance:
    Type: 'AWS::DMS::ReplicationInstance'
    Properties:
      AllocatedStorage: {{ dms_allocation_storage }}
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      EngineVersion: {{ dms_engine_version }}
      MultiAZ: false
      PubliclyAccessible: true
      ReplicationInstanceClass: {{ dms_instance_class }}
      ReplicationInstanceIdentifier: {{ business_unit }}-{{ application_name }}-replinstance
      ReplicationSubnetGroupIdentifier: !Ref DMSsubnetgroup
      VpcSecurityGroupIds:
        - !Ref DMSSecurityGroup


  DMSmySQLSourceEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      DatabaseName: {{ rds_db_name }}
      EndpointIdentifier: {{ business_unit }}-{{ application_name }}-endpoint-source
      EndpointType: source
      EngineName: {{ rds_engine }}
      Password: !Ref DBPassword
      Port: {{ rds_port }}
      ServerName: !GetAtt
        - mySQLDB
        - Endpoint.Address
      Username: !Ref DBUser


  DMSS3Policy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action:
              - 's3:*'
            Resource: !Join
              - ''
              - - !GetAtt
                  - TempS3Bucket
                  - Arn
                - /*
          - Sid: VisualEditor1
            Effect: Allow
            Action:
              - 's3:*'
            Resource: !GetAtt
              - TempS3Bucket
              - Arn
      ManagedPolicyName: HudiDemoDMSS3Policy
      Roles:
        - !Ref DMSS3IAMRole


  DMSS3IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: HudiDemoDMSS3IAMRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: dms.amazonaws.com
            Action: 'sts:AssumeRole'


  DMSS3TargetEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EndpointIdentifier: {{ business_unit }}-{{ application_name }}-endpoint-target
      EndpointType: target
      EngineName: s3
      ExtraConnectionAttributes: >-
        dataFormat=parquet;parquetTimestampInMillisecond=true;timestampColumnName=dms_received_ts;
      S3Settings:
        BucketFolder: dmsdata
        BucketName: !Ref TempS3Bucket
        ServiceAccessRoleArn: !GetAtt
          - DMSS3IAMRole
          - Arn


  DMSReplicationTask:
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      ReplicationTaskIdentifier: {{ business_unit }}-{{ application_name }}-repl-task-01
      SourceEndpointArn: !Ref DMSmySQLSourceEndpoint
      TableMappings: >-
        {
          "rules":
            [
              {
                "rule-type": "selection",
                "rule-id": "1",
                "rule-name":"1",
                "object-locator":
                  {
                    "schema-name": "{{ rds_db_name }}",
                    "table-name":"%"
                  },
                "rule-action": "include",
                "filters": []
              }
            ]
        }
      TargetEndpointArn: !Ref DMSS3TargetEndpoint


  emrRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'


  emrEc2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'


  EMREC2Policy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: '*'
            Action:
              - 'cloudwatch:*'
              - 'ec2:Describe*'
              - 'elasticmapreduce:Describe*'
              - 'elasticmapreduce:ListBootstrapActions'
              - 'elasticmapreduce:ListClusters'
              - 'elasticmapreduce:ListInstanceGroups'
              - 'elasticmapreduce:ListInstances'
              - 'elasticmapreduce:ListSteps'
          - Effect: Allow
            Resource:
              - !Join
                - ''
                - - !GetAtt
                    - TempS3Bucket
                    - Arn
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref EMRLogS3Bucket
                  - /*
            Action:
              - 's3:*'
          - Effect: Allow
            Resource: 'arn:aws:s3:::{{ bucket_artifacts }}/*'
            Action:
              - 's3:Get*'
          - Effect: Allow
            Resource: 'arn:aws:s3:::{{ bucket_artifacts }}'
            Action:
              - 's3:ListBucket'
          - Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'AWS::Region'
                - .elasticmapreduce/*
            Action:
              - 's3:Get*'
          - Effect: Allow
            Resource:
              - !GetAtt
                - TempS3Bucket
                - Arn
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref EMRLogS3Bucket
            Action:
              - 's3:*'
          - Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:glue:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':catalog'
            Action:
              - 'glue:CreateDatabase'
              - 'glue:*Table*'
              - 'glue:*Partition*'
              - 'glue:Get*'
          - Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:glue:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':database/{{ glue_db_name }}'
              - !Join
                - ''
                - - 'arn:aws:glue:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':database/global_temp'
              - !Join
                - ''
                - - 'arn:aws:glue:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':database/default'
              - !Join
                - ''
                - - 'arn:aws:glue:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':table/{{ glue_db_name }}/*'
              - !Join
                - ''
                - - 'arn:aws:glue:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':table/default/*'
            Action:
              - 'glue:*Table*'
              - 'glue:*Partition*'
              - 'glue:*Database*'
              - 'glue:Get*'
      ManagedPolicyName: HudiDemoEMREC2Policy
      Roles:
        - !Ref emrEc2Role


  emrEc2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref emrEc2Role


  EMRCluster:
    Type: 'AWS::EMR::Cluster'
    Properties:
      Applications:
        # including more than required for Hudi, for study purpose
{% for app in emr_apps %}
        - Name: {{ app }}
{% endfor %}

      BootstrapActions:
        - Name: Bootstrap1
          ScriptBootstrapAction:
            Path: !Join
              - ''
              - - 's3://'
                - !Ref 'AWS::Region'
                - .elasticmapreduce/bootstrap-actions/run-if
            Args:
              - instance.isMaster=true
              - aws
              - s3
              - cp
              - >-
                s3://{{ bucket_artifacts }}/{{ application_name }}/artifacts/bootstrap/hudi-bootstrap.sh
              - /home/hadoop/
        - Name: Bootstrap2
          ScriptBootstrapAction:
            Path: !Join
              - ''
              - - 's3://'
                - !Ref 'AWS::Region'
                - .elasticmapreduce/bootstrap-actions/run-if
            Args:
              - instance.isMaster=true
              - chmod
              - a+rx
              - /home/hadoop/hudi-bootstrap.sh
        - Name: Bootstrap3
          ScriptBootstrapAction:
            Path: !Join
              - ''
              - - 's3://'
                - !Ref 'AWS::Region'
                - .elasticmapreduce/bootstrap-actions/run-if
            Args:
              - instance.isMaster=true
              - /home/hadoop/hudi-bootstrap.sh
              - !Ref TempS3Bucket
      Tags:
        - Key: Name
          Value: {{ emr_cluster_name }}
      Configurations:
        - Classification: hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: >-
              com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
        - Classification: spark-hive-site
          ConfigurationProperties:
            hive.metastore.client.factory.class: >-
              com.amazonaws.glue.catalog.metastore.AWSGlueDataCatalogHiveClientFactory
      Instances:
        Ec2KeyName: !Ref KeyName
        MasterInstanceGroup:
          InstanceCount: {{ emr_master_count }}
          InstanceType: {{ emr_master_instance }}
          Market: ON_DEMAND
          Name: Master

{% if emr_core_count > 0 %}
        CoreInstanceGroup:
          InstanceCount: {{ emr_core_count }}
          InstanceType: {{ emr_core_instance }}
          Market: ON_DEMAND
          Name: CORE
{% endif %}

        TerminationProtected: false
        Ec2SubnetId: !Ref Subnet1
      JobFlowRole: !Ref emrEc2InstanceProfile
      Name: {{ emr_cluster_name }}
      ReleaseLabel: {{ emr_release }}
      ServiceRole: !Ref emrRole
      VisibleToAllUsers: true
      LogUri: !Join
        - ''
        - - 's3://'
          - !Ref EMRLogS3Bucket
          - /{{ application_name }}-emr-logs/


Outputs:
  DataLakeS3Bucket:
    Description: Data Lake S3 bucket created by the stack
    Value: !Ref TempS3Bucket


  mySQLDatabaseEndpoint:
    Description: EndPoint for the RDS mySQL database
    Value: !GetAtt
      - mySQLDB
      - Endpoint.Address


  mySQLDatabasePort:
    Description: Port for the RDS mySQL database
    Value: '{{ rds_port }}'

  EMRClusterMasterNodeDNS:
    Description: DNS for the master node of the EMR cluster
    Value: !GetAtt
      - EMRCluster
      - MasterPublicDNS

  EMRClusterId:
    Description: EMR cluster id
    Value: !Ref EMRCluster
